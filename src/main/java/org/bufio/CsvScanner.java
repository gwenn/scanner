package org.bufio;

import java.io.IOException;
import java.io.Reader;

/**
 * Provides an interface for reading CSV data
 * (compatible with rfc4180 and extended with the option of having a separator other than ",").
 * Successive calls to the `scan` method will step through the 'fields', skipping the separator/newline between the fields.
 * The `atEndOfRow` method tells when a field is terminated by a line break.
 * <p><blockquote><pre>
 *     CsvScanner s;
 *     while (s.scan())) {
 *       String value = s.value();
 *       // ...
 *       if (s.atEndOfRow()) {
 *         // ...
 *       }
 *     }
 * </pre></blockquote>
 * </p>
 */
public class CsvScanner extends AbstractCsvScanner<String> {
  /**
   * Create a "standard" CSV reader (separator is comma and quoted mode active)
   */
  public CsvScanner(Reader r) {
    super(r);
  }

  /**
   * Return a new CSV scanner to read from `r`.
   * When `quoted` is false, values must not contain a separator or newline.
   */
  public CsvScanner(Reader r, char sep, boolean quoted) {
    super(r, sep, quoted);
  }

  protected String newToken(char[] data, int start, int end) {
    if (start == end) {
      return "";
    }
    return new String(data, start, end - start);
  }

  /**
   * Extra fields are skipped (when the number of fields is greater than `values` size).
   * Returns the number of fields read (not the number of values).
   * At EOF, returns 0.
   * <p><blockquote><pre>
   *     CsvScanner s;
   *     String[] values = new String[20]; // max columns
   *     int n;
   *     while ((n = s.scanRow(values)) > 0) {
   *       String[] row = Arrays.copyOf(values, n);
   *       // ...
   *     }
   * </pre></blockquote>
   * </p>
   */
  public int scanRow(String[] values) throws IOException {
    int i;
    for (i = 0; i < values.length && scan(); i++) {
      values[i] = value();
      if (atEndOfRow()) {
        return i + 1;
      }
    }
    // Extra values are skipped.
    while (!atEndOfRow() && scan()) {
      i++;
    }
    return i;
  }

  // Returns the most recent value generated by a call to scan.
  public String value() {
    return token();
  }
}
